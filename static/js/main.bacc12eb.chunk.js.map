{"version":3,"sources":["components/columns.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["COLUMNS","Header","accessor","id","Table","columns","useMemo","data","mockData","useTable","useSortBy","usePagination","useColumnOrder","getTableProps","getTableBodyProps","headerGroups","page","nextPage","previousPage","state","setPageSize","setColumnOrder","visibleColumns","getToggleHideAllColumnsProps","allColumns","prepareRow","className","type","map","column","i","getToggleHiddenProps","onChange","arr","splice","unshift","a","sticky","onClick","columnArray","randomArr","length","random","Math","floor","push","columnOrder","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","pageIndex","value","pageSize","e","Number","target","size","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bacc12eb.chunk.js","sourcesContent":["const COLUMNS = [\r\n  {\r\n    Header: 'Id',\r\n    accessor: 'id',\r\n    id: '0',\r\n  },\r\n  {\r\n    Header: 'First name',\r\n    accessor: 'first_name',\r\n    id: '1'\r\n  },\r\n  {\r\n    Header: 'Last name',\r\n    accessor: 'last_name',\r\n    id: '2'\r\n  },\r\n  {\r\n    Header: 'Email',\r\n    accessor: 'email',\r\n    id: '3'\r\n  },\r\n  {\r\n    Header: 'Data of birth',\r\n    accessor: 'data_of_birth',\r\n    id: '4'\r\n  },\r\n  {\r\n    Header: 'Age',\r\n    accessor: 'age',\r\n    id: '5'\r\n  }\r\n]\r\n\r\n\r\nexport default COLUMNS","import mockData from '../asset/MOCK_DATA.json'\r\nimport COLUMNS from './columns'\r\nimport { useTable, useSortBy, usePagination, useColumnOrder } from 'react-table'\r\nimport { useMemo } from 'react'\r\n\r\n\r\nconst Table = () => {\r\n  const columns = useMemo(() => COLUMNS, [])\r\n  const data = useMemo(() => mockData, [])\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    state,\r\n    setPageSize,\r\n    setColumnOrder,\r\n    visibleColumns,\r\n    getToggleHideAllColumnsProps,\r\n    allColumns,\r\n    prepareRow,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useSortBy,\r\n    usePagination,\r\n    useColumnOrder,\r\n  )\r\n\r\n  const columnOrder = (arr) => {\r\n    const columnArray = [...arr]\r\n    const randomArr = []\r\n    while (columnArray.length) {\r\n      const random = Math.floor(Math.random() * columnArray.length)\r\n      randomArr.push(columnArray.splice(random, 1)[0])\r\n    }\r\n    return randomArr\r\n  }\r\n  const changeColumnOrder = () => setColumnOrder(columnOrder(visibleColumns.map(column => column.id)))\r\n\r\n\r\n  const sticky = (column) => {\r\n    const arr = [...columns]\r\n    arr.splice(column.id, 1)\r\n    arr.unshift(column)\r\n    setColumnOrder(arr.map((a) => a.id))\r\n  }\r\n\r\n  return <div className=\"table\">\r\n    <div className=\"hide-columns\">\r\n      <h3>Hide column</h3>\r\n\r\n      <div className='flex-hide-columns'>\r\n        <label>\r\n          <input type=\"checkBox\" {...getToggleHideAllColumnsProps()} />\r\n      All columns\r\n      </label>\r\n\r\n        {allColumns.map((column, i) => (\r\n          <div key={i}>\r\n            <label>\r\n              <input type=\"checkbox\" {...column.getToggleHiddenProps()} />\r\n              {column.Header}\r\n            </label>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n    <br></br>\r\n\r\n    <div className=\"column-order\">\r\n      <h3>Sticky column</h3>\r\n      {columns.map(column => (\r\n        <label>\r\n          <input type=\"checkbox\" onChange={() => sticky(column)} />\r\n          {column.Header}\r\n        </label>\r\n      ))}\r\n\r\n    </div>\r\n    <button className=\"random-order-btn\" onClick={changeColumnOrder}>Random column order</button>\r\n\r\n    <table {...getTableProps()}>\r\n      <thead>\r\n        {headerGroups.map(headerGroup => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n\r\n                {column.render(\"Header\")}\r\n                {column.isSorted ? (column.isSortedDesc ? <i className=\"fas fa-sort-up\"></i> : <i className=\"fas fa-sort-down\"></i>) : \"\"}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {page.map(row => {\r\n          prepareRow(row)\r\n          return (\r\n            <tr {...row.getRowProps()}>\r\n              {row.cells.map(cell => {\r\n                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n              })}\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n    <div className=\"pagination\">\r\n      <button onClick={() => previousPage()}>previousPage</button>\r\n      <button onClick={() => nextPage()}>nextPage</button>\r\n      <p>Page number: {state.pageIndex + 1}</p>\r\n      <p>Choose size:</p> <select\r\n        value={state.pageSize}\r\n        onChange={(e) => setPageSize(Number(e.target.value))}>\r\n        {[10, 20, 30].map(size => {\r\n          return <option key={size} value={size}>{size}</option>\r\n        })}\r\n      </select>\r\n\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default Table","import './asset/sass/App.sass';\r\nimport Table from './components/Table'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Table />\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}