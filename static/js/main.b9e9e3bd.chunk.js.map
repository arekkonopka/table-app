{"version":3,"sources":["components/columns.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["COLUMNS","Header","accessor","Table","columns","useMemo","data","mockData","useTable","useSortBy","usePagination","useColumnOrder","useSticky","getTableProps","getTableBodyProps","headerGroups","page","nextPage","previousPage","state","setPageSize","setColumnOrder","visibleColumns","getToggleHideAllColumnsProps","allColumns","prepareRow","className","type","map","column","i","getToggleHiddenProps","onClick","arr","columnArray","randomArr","length","random","Math","floor","push","splice","columnOrder","id","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","onChange","e","console","log","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","pageIndex","value","pageSize","Number","target","size","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9e9e3bd.chunk.js","sourcesContent":["const COLUMNS = [\r\n  {\r\n    Header: 'Id',\r\n    accessor: 'id',\r\n  },\r\n  {\r\n    Header: 'First name',\r\n    accessor: 'first_name'\r\n  },\r\n  {\r\n    Header: 'Last name',\r\n    accessor: 'last_name'\r\n  },\r\n  {\r\n    Header: 'Email',\r\n    accessor: 'email'\r\n  },\r\n  {\r\n    Header: 'Data of birth',\r\n    accessor: 'data_of_birth'\r\n  },\r\n  {\r\n    Header: 'Age',\r\n    accessor: 'age'\r\n  }\r\n]\r\n\r\n\r\nexport default COLUMNS","import mockData from '../asset/MOCK_DATA.json'\r\nimport COLUMNS from './columns'\r\nimport { useTable, useSortBy, usePagination, useColumnOrder } from 'react-table'\r\nimport { useMemo } from 'react'\r\nimport { useSticky } from 'react-table-sticky'\r\n\r\n\r\nconst Table = () => {\r\n  const columns = useMemo(() => COLUMNS, [])\r\n  const data = useMemo(() => mockData, [])\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    state,\r\n    setPageSize,\r\n    setColumnOrder,\r\n    visibleColumns,\r\n    getToggleHideAllColumnsProps,\r\n    allColumns,\r\n    prepareRow,\r\n\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useSortBy,\r\n    usePagination,\r\n    useColumnOrder,\r\n    useSticky\r\n  )\r\n\r\n  const columnOrder = (arr) => {\r\n    const columnArray = [...arr]\r\n    const randomArr = []\r\n    while (columnArray.length) {\r\n      const random = Math.floor(Math.random() * columnArray.length)\r\n      randomArr.push(columnArray.splice(random, 1)[0])\r\n    }\r\n    return randomArr\r\n  }\r\n  const changeColumnOrder = () => setColumnOrder(columnOrder(visibleColumns.map(column => column.id)))\r\n\r\n  return <div className=\"table\">\r\n    <div className=\"hide-columns\">\r\n      <label>\r\n        <input type=\"checkBox\" {...getToggleHideAllColumnsProps()} />\r\n      All columns\r\n      </label>\r\n\r\n\r\n      {allColumns.map((column, i) => (\r\n        <div key={i}>\r\n          <label>\r\n            <input type=\"checkbox\" {...column.getToggleHiddenProps()} />\r\n            {column.Header}\r\n          </label>\r\n        </div>\r\n      ))}\r\n    </div>\r\n\r\n    <br></br>\r\n    <button onClick={changeColumnOrder}>change column order</button>\r\n    <table {...getTableProps()}>\r\n      <thead>\r\n        {headerGroups.map(headerGroup => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                <label>\r\n                  <input type=\"checkbox\" onChange={(e) => {\r\n                    const arr = visibleColumns\r\n                    // arr.splice(column.depth, 1)\r\n                    // console.log(arr)\r\n                    // const fixedArr = arr.push(column)\r\n                    // if (e.target.checked) {\r\n                    //   e.target.parentElement.parentElement.className = 'sticky'\r\n                    // } else {\r\n                    //   e.target.parentElement.parentElement.className = ''\r\n                    // }\r\n                    // console.log(e.target.parentElement.parentElement.nextElementSibling)\r\n                    console.log(column)\r\n                    // console.log(...columns.map((column) => console.log('column', column)))\r\n\r\n                  }} />\r\n                </label>\r\n                {column.render(\"Header\")}\r\n                {column.isSorted ? (column.isSortedDesc ? <i className=\"fas fa-sort-up\"></i> : <i className=\"fas fa-sort-down\"></i>) : \"\"}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {page.map(row => {\r\n          prepareRow(row)\r\n          return (\r\n            <tr {...row.getRowProps()}>\r\n              {row.cells.map(cell => {\r\n                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n              })}\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n    <div className=\"pagination\">\r\n      <button onClick={() => previousPage()}>previousPage</button>\r\n      <button onClick={() => nextPage()}>nextPage</button>\r\n      <p>Page number: {state.pageIndex + 1}</p>\r\n      <p>Choose size:</p> <select\r\n        value={state.pageSize}\r\n        onChange={(e) => setPageSize(Number(e.target.value))}>\r\n        {[10, 20, 30].map(size => {\r\n          return <option key={size} value={size}>{size}</option>\r\n        })}\r\n      </select>\r\n\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default Table","import './asset/sass/App.sass';\r\nimport Table from './components/Table'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Table />\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}